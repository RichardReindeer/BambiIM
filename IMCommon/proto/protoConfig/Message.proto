syntax = "proto3";
// package com.bambi.imcommon;
// 结束头部声明

option java_package = "com.bambi.imcommon.common.config";
option java_outer_classname = "ProtoMessage";
// 结束java选项配置

// 消息类型枚举
enum HeadType{
  LOGIN_REQUEST = 0; // 登录请求
  LOGIN_RESPONSE = 1; // 登录响应
  LOGOUT_REQUEST = 2; // 登出请求
  LOGOUT_RESPONSE = 3; // 登出响应
  KEEPLIVE_REQUEST = 4; // 心跳请求
  KEEPLIVE_RESPONSE = 5; // 心跳响应
  MESSAGE_REQUEST = 6;// 聊天信息请求
  MESSAGE_RESPONSE = 7; // 聊天信息响应
  MESSAGE_NOTIFICATION = 8; // 服务器通知
}

// 对于登录请求类型信息的信息结构设计

message LoginRequest{
  string uid = 1; // 用户唯一ID
  string deviceId = 2; // 设备id
  string token = 3; // 用户token
  uint32 platform = 4; // 客户端平台
  string appVersion = 5;// app版本号
}

message LoginResponse{
  bool result = 1;
  uint32  code = 2;
  string info = 3;
  uint32  expose = 4;
}

message MessageRequest{
  uint64  msg_id = 1;
  string from = 2;
  string to = 3;
  uint64  time = 4;
  uint32  msg_type = 5;
  string content = 6;
  optional string url = 7;
  optional string property = 8;
  optional string from_nick = 10;
  optional string json = 11;
}

// 应答消息加上成功标记和应答序号
message MessageResponse{
  bool result = 1; // ture表示发送成功 ， false表示发送失败
  uint32 code = 2; // 错误码
  string info = 3; // 错误描述
  uint32 expose = 4; // 错误描述是否提示给用户 , 1提示 ， 0 不提示
  bool lastBlock = 5; // 是否为最后的应答
  fixed32 blockIndex = 6; // 应答的序号
}

message MessageNotification{
  uint32  msg_type = 1;
  bytes sender = 2;
  string json = 3;
  string timestamp = 4;
}

// 最好设计一个外层的消息把所有的消息类型全部封装起来 ， 在通信的时候，可以从外层消息开始编码或者解码
// 对于聊天器中的外层消息 ， 我外层的消息结构可以定义如下
message Message {
  HeadType type = 1;                    // 消息类型
  uint64 sequence = 2;                  // 序列号
  string sessionId = 3;                 // 会话ID
  LoginRequest loginRequest = 4;        // 登录请求
  LoginResponse loginResponse = 5;      // 登录响应
  MessageRequest  messageRequest = 6;   // 聊天请求
  MessageResponse messageResponse = 7;  // 聊天响应
  MessageNotification notification = 8; // 通知信息
}